{
  "0": {"name": "globals", 
    "description": "Added by IPI-Paul to initially provide path to globally installed files. Now also provides path and filename retrieval functions for package structure.", 
    "files": ["globals"], "locations": ["."],
    "chapter": {"name": "", "description": "Global Install Location", "packages": []}},
  "1": {"name": "tutorial_01", "description": "Console log Hello World example", "files": ["server_01"], "locations": [""], 
    "chapter": {"name": "chapter_01", "description": "Start Here", "packages": []}},
  "2": {"name": "tutorial_02", "description": "Displays the properties of the global object in the console", "files": ["server_02"], "locations": [""], 
    "chapter": {"name": "chapter_01", "description": "Start Here", "packages": []}},
  "3": {"name": "tutorial_03", "description": "Displays 3  of the properties of the os object", "files": ["server_03"], "locations": [""], 
    "chapter": {"name": "chapter_01", "description": "Start Here", "packages": []}},
  "4": {"name": "tutorial_04", "description": "Displays the output from __dirname and __filename that retrieve current path and filename", "files": ["server_04"], "locations": [""], 
    "chapter": {"name": "chapter_01", "description": "Start Here", "packages": []}},
  "5": {"name": "tutorial_05", "description": "Displays 4 functions of the path object used in extracting file properties", "files": ["server_05"], "locations": [""], 
    "chapter": {"name": "chapter_01", "description": "Start Here", "packages": []}},
  "6": {"name": "tutorial_06", "description": "Module Export/Import example giving 4 math functions", "files": ["server_06", "math_01"], "locations": ["", ""], 
    "chapter": {"name": "chapter_01", "description": "Start Here", "packages": []}},
  "7": {"name": "tutorial_07", "description": "Exports/Import example without use of module.exports structure", "files": ["server_07", "math_02"], "locations": ["", ""], 
    "chapter": {"name": "chapter_01", "description": "Start Here", "packages": []}},
  "8": {"name": "tutorial_08", "description": "Importing of module.exports object as an array", "files": ["server_08", "math_01"], "locations": ["", ""], 
    "chapter": {"name": "chapter_01", "description": "Start Here", "packages": []}},
  "9": {"name": "tutorial_09", "description": "Importing of exports objects as an array", "files": ["server_09", "math_02"], "locations": ["", ""], 
    "chapter": {"name": "chapter_01", "description": "Start Here", "packages": []}},
  "10": {"name": "tutorial_10", "description": "Uses the fs object to read raw data from a file", "files": ["index_01"], "locations": [""], 
    "chapter": {"name": "chapter_02", "description": "Write Files", "packages": []}},
  "11": {"name": "tutorial_11", "description": "Uses the fs object to read raw data from a file and convert it to string text", "files": ["index_02"], "locations": [""], 
    "chapter": {"name": "chapter_02", "description": "Write Files", "packages": []}},
  "12": {"name": "tutorial_12", "description": "Uses the fs object to read raw data from a file using a set encoding", "files": ["index_03"], "locations": [""], 
    "chapter": {"name": "chapter_02", "description": "Write Files", "packages": []}},
  "13": {"name": "tutorial_13", "description": "Uses the fs object to read raw data from a file using a set encoding and traps any uncaughtException to diplay a set message", "files": ["index_04"], "locations": [""], 
    "chapter": {"name": "chapter_02", "description": "Write Files", "packages": []}},
  "14": {"name": "tutorial_14", "description": "Uses the fs object to read raw data from a file using a set encoding, then writes to a new file and appends to another new/current file", "files": ["index_05"], "locations": [""], 
    "chapter": {"name": "chapter_02", "description": "Write Files", "packages": []}},
  "15": {"name": "tutorial_15", "description": "Uses fs to write to a file and then append to the same file", "files": ["index_06"], "locations": [""], 
    "chapter": {"name": "chapter_02", "description": "Write Files", "packages": []}},
  "16": {"name": "tutorial_16", "description": "Uses fs to write to a file and then append to the same file before renaming the file", "files": ["index_07"], "locations": [""], 
    "chapter": {"name": "chapter_02", "description": "Write Files", "packages": []}},
  "17": {"name": "tutorial_17", "description": "Uses fs promises function to asychronously read from a file and the path object to build the location of the file being read", "files": ["index_08"], "locations": [""], 
    "chapter": {"name": "chapter_02", "description": "Write Files", "packages": []}},
  "18": {"name": "tutorial_18", "description": "Like index_08, but also writes to, appends to and renames a new file before reading it's contents", "files": ["index_09"], "locations": [""], 
    "chapter": {"name": "chapter_02", "description": "Write Files", "packages": []}},
  "19": {"name": "tutorial_19", "description": "Like index_09 but also removes the 1st file read using the fs promises unlink method", "files": ["index_10"], "locations": [""], 
    "chapter": {"name": "chapter_02", "description": "Write Files", "packages": []}},
  "20": {"name": "tutorial_20", "description": "Uses the fs object Create Read and Write streams. Then uses the Read emitter on function of the read stream to read from one file and within it's callback the write stream to write to a new function", "files": ["stream_01"], "locations": [""], 
    "chapter": {"name": "chapter_02", "description": "Write Files", "packages": []}},
  "21": {"name": "tutorial_21", "description": "Uses the fs object Create Read and Write streams. Then uses the pipe function of the read stream to call the write stream", "files": ["stream_02"], "locations": [""], 
    "chapter": {"name": "chapter_02", "description": "Write Files", "packages": []}},
  "22": {"name": "tutorial_22", "description": "Use the fs objects mkdir method to create a directory", "files": ["dir_01"], "locations": [""], 
    "chapter": {"name": "chapter_02", "description": "Write Files", "packages": []}},
  "23": {"name": "tutorial_23", "description": "Use the fs objects existsSync method to check if a directory exists, then the mkdir method to create a directory", "files": ["dir_02"], "locations": [""], 
    "chapter": {"name": "chapter_02", "description": "Write Files", "packages": []}},
  "24": {"name": "tutorial_24", "description": "Use the fs objects existsSync method to check if a directory exists, then the rmdir function to remove it", "files": ["dir_03"], "locations": [""], 
    "chapter": {"name": "chapter_02", "description": "Write Files", "packages": []}},
  "25": {"name": "tutorial_25", "description": "Uses the date-fns custom module to format a date", "files": ["index_01"], "locations": [""], 
    "chapter": {"name": "chapter_03", "description": "NPM Modules", "packages": ["date-fns"]}},
  "26": {"name": "tutorial_26", "description": "Repeat index-01 and also uses the uuid custom module to generate a unique id", "files": ["index_02"], "locations": [""], 
    "chapter": {"name": "chapter_03", "description": "NPM Modules", "packages": ["date-fns", "uuid"]}},
  "27": {"name": "tutorial_27", "description": "Uses fs, events and the custom modules date-fns and uuid to generate logs with the events emitter function after a set timeout and append to a log file", "files": ["index_01", "logEvents_01"], "locations": ["", ""], 
    "chapter": {"name": "chapter_04", "description": "Event Emitter", "packages": ["date-fns", "uuid"]}},
  "28": {"name": "tutorial_28", "description": "Like index_01, but creates a class that extends events and also uses the fs modules existsSync and mkdir to check if a folder exists for the log files and if not create it", "files": ["index_02", "logEvents_02"], "locations": ["", ""], 
    "chapter": {"name": "chapter_04", "description": "Event Emitter", "packages": ["date-fns", "uuid"]}},
  "29": {"name": "tutorial_29", "description": "Uses http, fs and path to provide a web server, read from a file and display its contents resulting from an if statement on the url passed", "files": ["server_01", "logEvents_01"], "locations": ["", ""], 
    "chapter": {"name": "chapter_05", "description": "Web Server", "packages": ["date-fns", "uuid"]}},
  "30": {"name": "tutorial_30", "description": "Uses http, fs and path to provide a web server, read from a file and display its contents resulting from a switch statement on the url passed", "files": ["server_02", "logEvents_01"], "locations": ["", ""], 
    "chapter": {"name": "chapter_05", "description": "Web Server", "packages": ["date-fns", "uuid"]}},
  "31": {"name": "tutorial_31", "description": "Uses http, fs and path to provide a web server, read from a file and display its contents resulting from a switch statement to check the content type, a chained filter statement on the url passed and a switch statement on the file name requested", "files": ["server_03", "logEvents_01"], "locations": ["", ""], 
    "chapter": {"name": "chapter_05", "description": "Web Server", "packages": ["date-fns", "uuid"]}},
  "32": {"name": "tutorial_32", "description": "Like server_03 but also submits a 404 page as the default for the switch statement on the file name", "files": ["server_04", "logEvents_01"], "locations": ["", ""], 
    "chapter": {"name": "chapter_05", "description": "Web Server", "packages": ["date-fns", "uuid"]}},
  "33": {"name": "tutorial_33", "description": "Like server_04 but uses JSON to parse and stringify the data if the content type is json", "files": ["server_05", "logEvents_01"], "locations": ["", ""], 
    "chapter": {"name": "chapter_05", "description": "Web Server", "packages": ["date-fns", "uuid"]}},
  "34": {"name": "tutorial_34", "description": "Like server_05 but precludes image files from being read with utf8 encoding", "files": ["server_06", "logEvents_01"], "locations": ["", ""], 
    "chapter": {"name": "chapter_05", "description": "Web Server", "packages": ["date-fns", "uuid"]}},
  "35": {"name": "tutorial_35", "description": "Like server_06 but also creates a class that extends events and its emit function to generate request and error logs", "files": ["server_07", "logEvents_01"], "locations": ["", ""], 
    "chapter": {"name": "chapter_05", "description": "Web Server", "packages": ["date-fns", "uuid"]}},
  "36": {"name": "tutorial_36", "description": "Uses express to create a web server and send text to the landing page", "files": ["server_01"], "locations": [""], 
    "chapter": {"name": "chapter_06", "description": "Express Js", "packages": ["express"]}},
  "37": {"name": "tutorial_37", "description": "Uses express to create a web server with a default directory and sends a web page in the response to a url request", "files": ["server_02"], "locations": [""], 
    "chapter": {"name": "chapter_06", "description": "Express Js", "packages": ["express"]}},
  "38": {"name": "tutorial_38", "description": "Uses express to create a web server and its get function to route traffic to the root directory specified using path", "files": ["server_03"], "locations": [""], 
    "chapter": {"name": "chapter_06", "description": "Express Js", "packages": ["express"]}},
  "39": {"name": "tutorial_39", "description": "Like server_03 but also uses the get function to route traffic to a requested page", "files": ["server_04"], "locations": [""], 
    "chapter": {"name": "chapter_06", "description": "Express Js", "packages": ["express"]}},
  "40": {"name": "tutorial_40", "description": "Like server_04, but uses a regular expression with the 1st get call to check if the root directory or index file is requested", "files": ["server_05"], "locations": [""], 
    "chapter": {"name": "chapter_06", "description": "Express Js", "packages": ["express"]}},
  "41": {"name": "tutorial_41", "description": "Like server_05, but also uses regular expressions to check if only file name without extension is requested", "files": ["server_06"], "locations": [""], 
    "chapter": {"name": "chapter_06", "description": "Express Js", "packages": ["express"]}},
  "42": {"name": "tutorial_42", "description": "Like server_06 but adds another get call to redirect to another page if a certain page is requested", "files": ["server_07"], "locations": [""], 
    "chapter": {"name": "chapter_06", "description": "Express Js", "packages": ["express"]}},
  "43": {"name": "tutorial_43", "description": "Like server_07 but adds a get call to send a not found status code for all requests other than the preceding specified routes", "files": ["server_08"], "locations": [""], 
    "chapter": {"name": "chapter_06", "description": "Express Js", "packages": ["express"]}},
  "44": {"name": "tutorial_44", "description": "Like server_08 but adds another get call before the final one, that uses the next operator in its call back function and chaining to deliver a console message and send text to the response page", "files": ["server_09"], "locations": [""], 
    "chapter": {"name": "chapter_06", "description": "Express Js", "packages": ["express"]}},
  "45": {"name": "tutorial_45", "description": "Like server_09 but adds route handler chaining before the last get call", "files": ["server_10"], "locations": [""], 
    "chapter": {"name": "chapter_06", "description": "Express Js", "packages": ["express"]}},
  "46": {"name": "tutorial_46", "description": "Uses express urlencoded and json functions to handle urlencoded and json data, and the static function to load a public folder as the root folder", "files": ["server_01"], "locations": [""], 
    "chapter": {"name": "chapter_07", "description": "Middleware", "packages": ["express"]}},
  "47": {"name": "tutorial_47", "description": "Adds a custom middleware logger to show the call method and path in the console using the express use function", "files": ["server_02"], "locations": [""], 
    "chapter": {"name": "chapter_07", "description": "Middleware", "packages": ["express"]}},
  "48": {"name": "tutorial_48", "description": "Extends the custom middleware logger to also show the header origin and save to a log file", "files": ["server_03", "logEvents_01"], "locations": ["", "/middleware/"],
    "chapter": {"name": "chapter_07", "description": "Middleware", "packages": ["express", "date-fns", "uuid"]}},
  "49": {"name": "tutorial_49", "description": "Moves the custom middleware logger function to the middleware logger file and uses express use function to call it", "files": ["server_04", "logEvents_02"], "locations": ["", "/middleware/"], 
    "chapter": {"name": "chapter_07", "description": "Middleware", "packages": ["express", "date-fns", "uuid"]}},
  "50": {"name": "tutorial_50", "description": "Uses express use function with the cors module", "files": ["server_05", "logEvents_02"], "locations": ["", "/middleware/"], 
    "chapter": {"name": "chapter_07", "description": "Middleware", "packages": ["express", "cors", "date-fns", "uuid"]}},
  "51": {"name": "tutorial_51", "description": "Adds trusted origins and an option list to be checked by the cors module called from the express use function", "files": ["server_06", "logEvents_02"], "locations": ["", "/middleware/"], 
    "chapter": {"name": "chapter_07", "description": "Middleware", "packages": ["express", "cors", "date-fns", "uuid"]}},
  "52": {"name": "tutorial_52", "description": "Adds a callback to trap errors and output to console using the express use function", "files": ["server_07", "logEvents_02"], "locations": ["", "/middleware/"], 
    "chapter": {"name": "chapter_07", "description": "Middleware", "packages": ["express", "cors", "date-fns", "uuid"]}},
  "53": {"name": "tutorial_53", "description": "Extends the trusted origin checking in the cors options", "files": ["server_08", "logEvents_02"], "locations": ["", "/middleware/"], 
    "chapter": {"name": "chapter_07", "description": "Middleware", "packages": ["express", "cors", "date-fns", "uuid"]}},
  "54": {"name": "tutorial_54", "description": "Adds an error handler middleware and calls it using the express use function", "files": ["server_09", "logEvents_02", "errorHandler_01"], "locations": ["", "/middleware/", "/middleware/"], 
    "chapter": {"name": "chapter_07", "description": "Middleware", "packages": ["express", "cors", "date-fns", "uuid"]}},
  "55": {"name": "tutorial_55", "description": "Uses the express all function to serve a page for all url requests not already picked up in the preceeding structure", "files": ["server_10", "logEvents_02", "errorHandler_01"], "locations": ["", "/middleware/", "/middleware/", "/middleware/"], 
    "chapter": {"name": "chapter_07", "description": "Middleware", "packages": ["express", "cors", "date-fns", "uuid"]}},
  "56": {"name": "tutorial_56", "description": "Checks for the content type of requests not found and responds with static html, json object or plain text", "files": ["server_11", "logEvents_02", "errorHandler_01"], "locations": ["", "/middleware/", "/middleware/"], 
    "chapter": {"name": "chapter_07", "description": "Middleware", "packages": ["express", "cors", "date-fns", "uuid"]}},
  "57": {"name": "tutorial_57", "description": "Uses express use function to call a routing file which loads file from a specified location", "files": ["server_01", "logEvents_01", "errorHandler_01", "subdir"], "locations": ["", "/middleware/", "/middleware/", "/routes/"], 
    "chapter": {"name": "chapter_08", "description": "Routing", "packages": ["express", "cors", "date-fns", "uuid"]}},
  "58": {"name": "tutorial_58", "description": "Uses express use function to serve static files from the new route", "files": ["server_02", "logEvents_01", "errorHandler_01", "subdir"], "locations": ["", "/middleware/", "/middleware/", "/routes/"], 
    "chapter": {"name": "chapter_08", "description": "Routing", "packages": ["express", "cors", "date-fns", "uuid"]}},
  "59": {"name": "tutorial_59", "description": "Adds a root routing", "files": ["server_03", "logEvents_01", "errorHandler_01", "subdir", "root"], "locations": ["", "/middleware/", "/middleware/", "/routes/", "/routes/"], 
    "chapter": {"name": "chapter_08", "description": "Routing", "packages": ["express", "cors", "date-fns", "uuid"]}},
  "60": {"name": "tutorial_60", "description": "Adds an API routing that enables simple CRUD operations for an employee object", "files": ["server_04", "logEvents_01", "errorHandler_01", "subdir", "root", "employees"], "locations": ["", "/middleware/", "/middleware/", "/routes/", "/routes/", "/routes/api/"], 
    "chapter": {"name": "chapter_08", "description": "Routing", "packages": ["express", "cors", "date-fns", "uuid"]}},
  "61": {"name": "tutorial_61", "description": "Moves the corsOptions object to a config folder file and the employee CRUD functions to a controllers folder file and updates in memory data of the employee object", "files": ["server_01", "corsOptions", "logEvents_01", "errorHandler_01", "root", "employees_01", "employeesController_01"], "locations": ["", "/config/", "/middleware/", "/middleware/", "/routes/", "/routes/api/", "/controllers/"], 
    "chapter": {"name": "chapter_09", "description": "MVC REST API", "packages": ["express", "cors", "date-fns", "uuid"]}},
  "62": {"name": "tutorial_62", "description": "Elaborates on the CRUD functions to update the employee data object source file", "files": ["server_02", "corsOptions", "logEvents_01", "errorHandler_01", "root", "employees_02", "employeesController_02"], "locations": ["", "/config/", "/middleware/", "/middleware/", "/routes/", "/routes/api/", "/controllers/"], 
    "chapter": {"name": "chapter_09", "description": "MVC REST API", "packages": ["express", "cors", "date-fns", "uuid"]}},
  "63": {"name": "tutorial_63", "description": "Adds a registration routing and it's controller", "files": ["server_01", "corsOptions", "logEvents_01", "errorHandler_01", "root", "register", "registerController", "employees_01", "employeesController_01"], "locations": ["", "/config/", "/middleware/", "/middleware/", "/routes/", "/routes/", "/controllers/", "/routes/api/", "/controllers/"], 
    "chapter": {"name": "chapter_10", "description": "Authentication", "packages": ["express", "cors", "date-fns", "uuid", "bcrypt"]}},
  "64": {"name": "tutorial_64", "description": "Adds authorisation routing and it's controller", "files": ["server_02", "corsOptions", "logEvents_01", "errorHandler_01", "root", "register", "registerController", "auth", "authController", "employees_01", "employeesController_01"], "locations": ["", "/config/", "/middleware/", "/middleware/", "/routes/", "/routes/", "/controllers/", "/routes/", "/controllers/", "/routes/api/", "/controllers/"], 
    "chapter": {"name": "chapter_10", "description": "Authentication", "packages": ["express", "cors", "date-fns", "uuid", "bcrypt"]}},
  "65": {"name": "tutorial_65", "description": "Uses the authorisation controller to send a jsonwebtoken token object from a .env file in a response and the middleware checks for that same token in a get all employees request. I added NODE_ENV=development to the .env file for use in files ending with _Mine. To generate the ACCESS_TOKEN_SECRET and REFRESH_TOKEN_SECRET for the .env file, run node at the command line and at the node prompt enter and run for each token: require('crypto').randomBytes(64).toString('hex')", "files": ["server_01", "corsOptions_01", "logEvents_01", "errorHandler_01", "root", "register", "registerController", "auth_01", "authController_01", "employees_01", "employeesController_01", ".env"], "locations": ["", "/config/", "/middleware/", "/middleware/", "/routes/", "/routes/", "/controllers/", "/routes/", "/controllers/", "/routes/api/", "/controllers/", "."], 
    "chapter": {"name": "chapter_11", "description": "JWT", "packages": ["express", "cors", "date-fns", "uuid", "bcrypt"]}},
  "66": {"name": "tutorial_66", "description": "Uses the express use function to call the middleware that verifies JSON web tokens prior to calling the employee CRUD functions", "files": ["server_02", "corsOptions_01", "logEvents_01", "errorHandler_01", "verifyJWT", "root", "register", "registerController", "auth_01", "authController_01", "employees_02", "employeesController_01", ".env"], "locations": ["", "/config/", "/middleware/", "/middleware/", "/middleware/", "/routes/", "/routes/", "/controllers/", "/routes/", "/controllers/", "/routes/api/", "/controllers/", ""], 
    "chapter": {"name": "chapter_11", "description": "JWT", "packages": ["express", "cors", "date-fns", "uuid", "bcrypt", "jsonwebtoken", "dotenv"]}},
  "67": {"name": "tutorial_67", "description": "Uses the express use function to call cookie-parser before serving the static files and routes. Also uses the express use function to call a Refresh route whose controller sends a new JSON web token in responses", "files": ["server_03", "corsOptions_01", "logEvents_01", "errorHandler_01", "verifyJWT", "root", "register", "registerController", "auth_01", "authController_01", "employees_02", "employeesController_01", ".env", "refresh", "refreshTokenController"], "locations": ["", "/config/", "/middleware/", "/middleware/", "/middleware/", "/routes/", "/routes/", "/controllers/", "/routes/", "/controllers/", "/routes/api/", "/controllers/", "", "/routes/", "/controllers/"], 
    "chapter": {"name": "chapter_11", "description": "JWT", "packages": ["express", "cors", "date-fns", "uuid", "bcrypt", "jsonwebtoken", "dotenv", "cookie-parser"]}},
  "68": {"name": "tutorial_68", "description": "Uses the express use function to call a Logout route whose controller checks for a matching entry in the users file with the JSON web token received in the cookie, then replaces the token for that user with an empty value", "files": ["server_04", "corsOptions_01", "logEvents_01", "errorHandler_01", "verifyJWT", "root", "register", "registerController", "auth_01", "authController_01", "employees_02", "employeesController_01", ".env", "refresh", "refreshTokenController", "logout_01", "logoutController_01"], "locations": ["", "/config/", "/middleware/", "/middleware/", "/middleware/", "/routes/", "/routes/", "/controllers/", "/routes/", "/controllers/", "/routes/api/", "/controllers/", "", "/routes/", "/controllers/", "/routes/", "/controllers/"], 
    "chapter": {"name": "chapter_11", "description": "JWT", "packages": ["express", "cors", "date-fns", "uuid", "bcrypt", "jsonwebtoken", "dotenv", "cookie-parser"]}},
  "69": {"name": "tutorial_69", "description": "Like server_04 except logout and refresh checking is done without restarting the server by deleting the users data cache", "files": ["server_04_Mine", "corsOptions_01", "logEvents_01", "errorHandler_01", "verifyJWT", "root", "register", "registerController", "auth_01", "authController_01", "employees_02", "employeesController_01", ".env", "refresh_Mine", "refreshTokenController_Mine", "logout_01_Mine", "logoutController_01_Mine"], "locations": ["", "/config/", "/middleware/", "/middleware/", "/middleware/", "/routes/", "/routes/", "/controllers/", "/routes/", "/controllers/", "/routes/api/", "/controllers/", "", "/routes/", "/controllers/", "/routes/", "/controllers/"], 
    "chapter": {"name": "chapter_11", "description": "JWT", "packages": ["express", "cors", "date-fns", "uuid", "bcrypt", "jsonwebtoken", "dotenv", "cookie-parser"]}},
  "70": {"name": "tutorial_70", "description": "Uses the express use function to call a Credentials middleware to check origins before the use function calls the cors options. The clear cookie function has been modified to check for an evironment variable as opposed to secure equals true which only runs in the browser", "files": ["server_05", "corsOptions_02", "logEvents_01", "errorHandler_01", "verifyJWT", "credentials", "root", "register", "registerController", "auth_02", "authController_02", "employees_02", "employeesController_01", ".env", "refresh", "refreshTokenController", "logout_02", "logoutController_02", "allowedOrigins"], "locations": ["", "/config/", "/middleware/", "/middleware/", "/middleware/", "/middleware/", "/routes/", "/routes/", "/controllers/", "/routes/", "/controllers/", "/routes/api/", "/controllers/", "", "/routes/", "/controllers/", "/routes/", "/controllers/", "/config/"], 
    "chapter": {"name": "chapter_11", "description": "JWT", "packages": ["express", "cors", "date-fns", "uuid", "bcrypt", "jsonwebtoken", "dotenv", "cookie-parser"]}},
  "71": {"name": "tutorial_71", "description": "Like server_05 except logout and refresh checking is done without restarting the server by deleting the users data cache", "files": ["server_05_Mine", "corsOptions_02", "logEvents_01", "errorHandler_01", "verifyJWT", "credentials", "root", "register", "registerController", "auth_02", "authController_02", "employees_02", "employeesController_01", ".env", "refresh_Mine", "refreshTokenController_Mine", "logout_02_Mine", "logoutController_02_Mine", "allowedOrigins"], "locations": ["", "/config/", "/middleware/", "/middleware/", "/middleware/", "/middleware/", "/routes/", "/routes/", "/controllers/", "/routes/", "/controllers/", "/routes/api/", "/controllers/", "", "/routes/", "/controllers/", "/routes/", "/controllers/", "/config/"], 
    "chapter": {"name": "chapter_11", "description": "JWT", "packages": ["express", "cors", "date-fns", "uuid", "bcrypt", "jsonwebtoken", "dotenv", "cookie-parser"]}},
  "72": {"name": "tutorial_72", "description": "Adds middleware to verify user roles when called from the employees route for all but the get all employees request", "files": ["server", "corsOptions", "logEvents", "errorHandler", "verifyJWT", "credentials", "root", "register", "registerController", "auth", "authController", "employees", "employeesController", ".env", "refresh", "refreshTokenController", "logout", "logoutController", "allowedOrigins", "roles_list", "verifyRoles"], "locations": ["", "/config/", "/middleware/", "/middleware/", "/middleware/", "/middleware/", "/routes/", "/routes/", "/controllers/", "/routes/", "/controllers/", "/routes/api/", "/controllers/", "", "/routes/", "/controllers/", "/routes/", "/controllers/", "/config/", "/config/", "/middleware/"], 
    "chapter": {"name": "chapter_12", "description": "User Roles", "packages": ["express", "cors", "date-fns", "uuid", "bcrypt", "jsonwebtoken", "dotenv", "cookie-parser"]}},
  "73": {"name": "tutorial_73", "description": "Like server except logout and refresh checking is done without restarting the server by deleting the users data cache and JSON web token verification includes authorisation headers that start with Token to enable requests from the browser console", "files": ["server_Mine", "corsOptions", "logEvents", "errorHandler", "verifyJWT_Mine", "credentials", "root", "register", "registerController", "auth_Mine", "authController_Mine", "employees", "employeesController", ".env", "refresh_Mine", "refreshTokenController_Mine", "logout_Mine", "logoutController_Mine", "allowedOrigins", "roles_list", "verifyRoles"], "locations": ["", "/config/", "/middleware/", "/middleware/", "/middleware/", "/middleware/", "/routes/", "/routes/", "/controllers/", "/routes/", "/controllers/", "/routes/api/", "/controllers/", "", "/routes/", "/controllers/", "/routes/", "/controllers/", "/config/", "/config/", "/middleware/"], 
    "chapter": {"name": "chapter_12", "description": "User Roles", "packages": ["express", "cors", "date-fns", "uuid", "bcrypt", "jsonwebtoken", "dotenv", "cookie-parser"]}},
  "74": {"name": "tutorial_74", "description": "Adds a Mongo Db connection and calls it before all other server calls but only utilises it in the employee route controller", "files": ["server", "corsOptions", "logEvents", "errorHandler", "verifyJWT", "credentials", "root", "register", "registerController", "auth", "authController", "employees", "employeesController", ".env", "refresh", "refreshTokenController", "logout", "logoutController", "allowedOrigins", "roles_list", "verifyRoles", "dbConn"], "locations": ["", "/config/", "/middleware/", "/middleware/", "/middleware/", "/middleware/", "/routes/", "/routes/", "/controllers/", "/routes/", "/controllers/", "/routes/api/", "/controllers/", "", "/routes/", "/controllers/", "/routes/", "/controllers/", "/config/", "/config/", "/middleware/", "/config/"], 
    "chapter": {"name": "chapter_13", "description": "MongoDb", "packages": ["express", "cors", "date-fns", "uuid", "bcrypt", "jsonwebtoken", "dotenv", "cookie-parser", "mongoose"]}},
  "75": {"name": "tutorial_75", "description": "Like server except logout and refresh checking is done without restarting the server by deleting the users data cache and JSON web token verification includes authorisation headers that start with Token to enable requests from the browser console. Also, the autorisation controller response cookie token's secure vairiable is the boolean result of checking the environment variable in the .env file and enables requests from Chrome and Thunder Client", "files": ["server_Mine", "corsOptions", "logEvents", "errorHandler", "verifyJWT_Mine", "credentials", "root", "register", "registerController", "auth_Mine", "authController_Mine", "employees", "employeesController", ".env", "refresh_Mine", "refreshTokenController_Mine", "logout_Mine", "logoutController_Mine", "allowedOrigins", "roles_list", "verifyRoles", "dbConn"], "locations": ["", "/config/", "/middleware/", "/middleware/", "/middleware/", "/middleware/", "/routes/", "/routes/", "/controllers/", "/routes/", "/controllers/", "/routes/api/", "/controllers/", "", "/routes/", "/controllers/", "/routes/", "/controllers/", "/config/", "/config/", "/middleware/", "/config/"], 
    "chapter": {"name": "chapter_13", "description": "MongoDb", "packages": ["express", "cors", "date-fns", "uuid", "bcrypt", "jsonwebtoken", "dotenv", "cookie-parser", "mongoose"]}},
  "76": {"name": "tutorial_76", "description": "Adds an employee and user model, but only utilises the user model in the register controller", "files": ["server", "corsOptions", "logEvents", "errorHandler", "verifyJWT", "credentials", "root", "register", "registerController", "auth", "authController", "employees", "employeesController", ".env", "refresh", "refreshTokenController", "logout", "logoutController", "allowedOrigins", "roles_list", "verifyRoles", "dbConn", "Employee", "User"], "locations": ["", "/config/", "/middleware/", "/middleware/", "/middleware/", "/middleware/", "/routes/", "/routes/", "/controllers/", "/routes/", "/controllers/", "/routes/api/", "/controllers/", "", "/routes/", "/controllers/", "/routes/", "/controllers/", "/config/", "/config/", "/middleware/", "/config/", "/model/", "/model/"], 
    "chapter": {"name": "chapter_14", "description": "Data Models", "packages": ["express", "cors", "date-fns", "uuid", "bcrypt", "jsonwebtoken", "dotenv", "cookie-parser", "mongoose"]}},
  "77": {"name": "tutorial_77", "description": "Like server except logout and refresh checking is done without restarting the server by deleting the users data cache and JSON web token verification includes authorisation headers that start with Token to enable requests from the browser console. Also, the autorisation controller response cookie token's secure vairiable is the boolean result of checking the environment variable in the .env file and enables requests from Chrome and Thunder Client", "files": ["server_Mine", "corsOptions", "logEvents", "errorHandler", "verifyJWT_Mine", "credentials", "root", "register", "registerController", "auth_Mine", "authController_Mine", "employees", "employeesController", ".env", "refresh_Mine", "refreshTokenController_Mine", "logout_Mine", "logoutController_Mine", "allowedOrigins", "roles_list", "verifyRoles", "dbConn", "Employee", "User"], "locations": ["", "/config/", "/middleware/", "/middleware/", "/middleware/", "/middleware/", "/routes/", "/routes/", "/controllers/", "/routes/", "/controllers/", "/routes/api/", "/controllers/", "", "/routes/", "/controllers/", "/routes/", "/controllers/", "/config/", "/config/", "/middleware/", "/config/", "/model/", "/model/"], 
    "chapter": {"name": "chapter_14", "description": "Data Models", "packages": ["express", "cors", "date-fns", "uuid", "bcrypt", "jsonwebtoken", "dotenv", "cookie-parser", "mongoose"]}},
  "78": {"name": "tutorial_78", "description": "Uses the express use function to call a user route to run CRUD operations and utilises the employee model in the employees route controller", "files": ["server", "corsOptions", "logEvents", "errorHandler", "verifyJWT", "credentials", "root", "register", "registerController", "auth", "authController", "employees", "employeesController", "users", "usersController", ".env", "refresh", "refreshTokenController", "logout", "logoutController", "allowedOrigins", "roles_list", "verifyRoles", "dbConn", "Employee", "User"], "locations": ["", "/config/", "/middleware/", "/middleware/", "/middleware/", "/middleware/", "/routes/", "/routes/", "/controllers/", "/routes/", "/controllers/", "/routes/api/", "/controllers/", "/routes/api/", "/controllers/", "", "/routes/", "/controllers/", "/routes/", "/controllers/", "/config/", "/config/", "/middleware/", "/config/", "/model/", "/model/"], 
    "chapter": {"name": "chapter_15", "description": "Async CRUD", "packages": ["express", "cors", "date-fns", "uuid", "bcrypt", "jsonwebtoken", "dotenv", "cookie-parser", "mongoose"]}},
  "79": {"name": "tutorial_79", "description": "Like server except JSON web token verification includes authorisation headers that start with Token to enable requests from the browser console. Also, the autorisation controller response and the logout controller clear cookie tokens' secure vairiable  is the boolean result of checking the environment variable in the .env file and enables requests from Chrome and Thunder Client", "files": ["server_Mine", "corsOptions", "logEvents", "errorHandler", "verifyJWT_Mine", "credentials", "root", "register", "registerController", "auth_Mine", "authController_Mine", "employees", "employeesController", "users", "usersController", ".env", "refresh", "refreshTokenController", "logout_Mine", "logoutController_Mine", "allowedOrigins", "roles_list", "verifyRoles", "dbConn", "Employee", "User"], "locations": ["", "/config/", "/middleware/", "/middleware/", "/middleware/", "/middleware/", "/routes/", "/routes/", "/controllers/", "/routes/", "/controllers/", "/routes/api/", "/controllers/", "/routes/api/", "/controllers/", "", "/routes/", "/controllers/", "/routes/", "/controllers/", "/config/", "/config/", "/middleware/", "/config/", "/model/", "/model/"], 
    "chapter": {"name": "chapter_15", "description": "Async CRUD", "packages": ["express", "cors", "date-fns", "uuid", "bcrypt", "jsonwebtoken", "dotenv", "cookie-parser", "mongoose"]}}
}